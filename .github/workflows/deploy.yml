name: Deploy to Vercel and RSS Fetch

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # 每小时执行一次RSS获取任务
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  deploy:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      # 如果你的 Next.js 项目在仓库根目录，并且后端在 'backend/' 子目录，
      # 那么 `npm ci` 默认会在仓库根目录执行，安装 Next.js 的依赖。
      # 如果你的后端 package.json 是独立的，Vercel 在部署时会根据 Root Directory 智能处理。
      run: npm ci

    - name: Build project
      run: npm run build
      env:
        # 正确引用 GitHub Secrets 作为环境变量，传递给构建过程
        MONGO_URI: ${{ secrets.MONGO_URI }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        REDIS_TOKEN: ${{ secrets.REDIS_TOKEN }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}
        NEXT_PUBLIC_APP_VERSION: ${{ secrets.NEXT_PUBLIC_APP_VERSION }}
        RSS_SOURCES: ${{ secrets.RSS_SOURCES }}
        CACHE_TTL_NEWS_LIST: ${{ secrets.CACHE_TTL_NEWS_LIST }}
        CACHE_TTL_NEWS_DETAIL: ${{ secrets.CACHE_TTL_NEWS_DETAIL }}
        CACHE_TTL_TRENDING: ${{ secrets.CACHE_TTL_TRENDING }}
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        NEWS_API_BASE_URL: ${{ secrets.NEWS_API_BASE_URL }}
        NODE_ENV: production # 部署时通常设置为 production

    - name: Deploy to Vercel (using Vercel CLI) # 修改步骤名称以反映新的部署方式
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }} # <-- 确保这一行在这里
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }} # <-- 确保这一行在这里
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }} # <-- 确保这一行在这里
      run: |
        # 安装 Vercel CLI
        npm install -g vercel

        # 切换到 Next.js 应用的根目录 (此行可省略，因为 working-directory 已经设置)
        # cd ./ 

        # 执行 Vercel 部署命令
        # --prod 表示部署到生产环境
        # --prebuilt (重要) 告诉 Vercel 已经构建了产物，直接部署。
        # --confirm 自动确认部署提示
        # --debug (可选) 添加 --debug 可在失败时获取更详细日志
        # 将 Vercel 认证相关的 Secrets 作为命令行参数传递给 Vercel CLI
        vercel deploy --prod --prebuilt --confirm --debug \
          --token=${{ secrets.VERCEL_TOKEN }} \
      working-directory: ./ # 确认这里是你的 Next.js 应用的实际根目录

  rss-fetch:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
    - name: Fetch RSS Data
      run: |
        curl -X POST "${{ secrets.VERCEL_DEPLOYMENT_URL }}/api/rss/fetch" \
          -H "Content-Type: application/json" \
          -H "x-api-key: ${{ secrets.RSS_API_KEY }}" \
          -d '{}'
      env:
        # VERCEL_DEPLOYMENT_URL 通常由 Vercel Action 在部署成功后自动提供
        # 确保 RSS_API_KEY 已在 GitHub Secrets 中定义
        VERCEL_DEPLOYMENT_URL: ${{ secrets.VERCEL_DEPLOYMENT_URL }}
        RSS_API_KEY: ${{ secrets.RSS_API_KEY }} # 确保这个 Secret 存在且值正确
