name: Deploy to Vercel and RSS Fetch

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # 每小时执行一次RSS获取任务
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  deploy:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build
      env:
        # 这些环境变量仅在GitHub Actions的"Build project"步骤中可用
        # NEXT_PUBLIC_XXX 变量在前端构建时会嵌入代码
        MONGO_URI: ${{ secrets.MONGO_URI }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        REDIS_TOKEN: ${{ secrets.REDIS_TOKEN }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}
        NEXT_PUBLIC_APP_VERSION: ${{ secrets.NEXT_PUBLIC_APP_VERSION }}
        RSS_SOURCES: ${{ secrets.RSS_SOURCES }}
        CACHE_TTL_NEWS_LIST: ${{ secrets.CACHE_TTL_NEWS_LIST }}
        CACHE_TTL_NEWS_DETAIL: ${{ secrets.CACHE_TTL_NEWS_DETAIL }}
        CACHE_TTL_TRENDING: ${{ secrets.CACHE_TTL_TRENDING }}
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        NEWS_API_BASE_URL: ${{ secrets.NEWS_API_BASE_URL }}
        NODE_ENV: production # 部署时通常设置为 production

    - name: Deploy to Vercel (using Vercel CLI)
      # 这些环境变量会在整个 'run' 脚本的shell环境中可用，包括 'vercel deploy' 命令
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }} # Vercel API Token (必需)
        # VERCEL_ORG_ID 和 VERCEL_PROJECT_ID 理论上可以通过 vercel.json 或 vercel link 自动识别
        # 如果依然报错，可以根据需要取消下方注释
        # VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        # VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

        # 将所有应用需要的环境变量也在这里列出，供 Vercel 运行时使用
        MONGO_URI: ${{ secrets.MONGO_URI }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        REDIS_TOKEN: ${{ secrets.REDIS_TOKEN }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}
        NEXT_PUBLIC_APP_VERSION: ${{ secrets.NEXT_PUBLIC_APP_VERSION }}
        RSS_SOURCES: ${{ secrets.RSS_SOURCES }}
        RSS_API_KEY: ${{ secrets.RSS_API_KEY }}
        CACHE_TTL_NEWS_LIST: ${{ secrets.CACHE_TTL_NEWS_LIST }}
        CACHE_TTL_NEWS_DETAIL: ${{ secrets.CACHE_TTL_NEWS_DETAIL }}
        CACHE_TTL_TRENDING: ${{ secrets.CACHE_TTL_TRENDING }}
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        NEWS_API_BASE_URL: ${{ secrets.NEWS_API_BASE_URL }}
        NODE_ENV: production

      run: |
        # 安装 Vercel CLI
        npm install -g vercel

        # Vercel CLI 默认会在 working-directory 中查找项目文件。
        # 如果你的 Next.js 应用就在仓库根目录，无需额外的 cd 命令。
        # cd ./ 

        # 执行 Vercel 部署命令
        # --prod 表示部署到生产环境
        # --confirm 自动确认部署提示
        # --debug (可选，仅用于调试) 添加此项可在失败时获取更详细日志
        # Vercel CLI 会自动从环境变量 (VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID) 获取凭据和项目信息。
        # 不再显式传递 --token, --scope, --project 参数。
        vercel deploy --prod --confirm --debug

      working-directory: ./ # 确认这里是你的 Next.js 应用的实际根目录 (仓库根目录)

  rss-fetch:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
    - name: Fetch RSS Data
      run: |
        curl -X POST "${{ secrets.VERCEL_DEPLOYMENT_URL }}/api/rss/fetch" \
          -H "Content-Type: application/json" \
          -H "x-api-key: ${{ secrets.RSS_API_KEY }}" \
          -d '{}'
      env:
        # VERCEL_DEPLOYMENT_URL 通常由 Vercel Action 在部署成功后自动提供
        # 确保 RSS_API_KEY 已在 GitHub Secrets 中定义
        VERCEL_DEPLOYMENT_URL: ${{ secrets.VERCEL_DEPLOYMENT_URL }}
        RSS_API_KEY: ${{ secrets.RSS_API_KEY }} # 确保这个 Secret 存在且值正确
