import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { SQSServiceException as __BaseException } from "./SQSServiceException";

export interface AddPermissionRequest {
    
    QueueUrl: string | undefined;
    
    Label: string | undefined;
    
    AWSAccountIds: string[] | undefined;
    
    Actions: string[] | undefined;
}
export declare namespace AddPermissionRequest {
    
    const filterSensitiveLog: (obj: AddPermissionRequest) => any;
}

export declare class OverLimit extends __BaseException {
    readonly name: "OverLimit";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<OverLimit, __BaseException>);
}
export interface ChangeMessageVisibilityRequest {
    
    QueueUrl: string | undefined;
    
    ReceiptHandle: string | undefined;
    
    VisibilityTimeout: number | undefined;
}
export declare namespace ChangeMessageVisibilityRequest {
    
    const filterSensitiveLog: (obj: ChangeMessageVisibilityRequest) => any;
}

export declare class MessageNotInflight extends __BaseException {
    readonly name: "MessageNotInflight";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<MessageNotInflight, __BaseException>);
}

export declare class ReceiptHandleIsInvalid extends __BaseException {
    readonly name: "ReceiptHandleIsInvalid";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ReceiptHandleIsInvalid, __BaseException>);
}

export declare class BatchEntryIdsNotDistinct extends __BaseException {
    readonly name: "BatchEntryIdsNotDistinct";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<BatchEntryIdsNotDistinct, __BaseException>);
}

export interface ChangeMessageVisibilityBatchRequestEntry {
    
    Id: string | undefined;
    
    ReceiptHandle: string | undefined;
    
    VisibilityTimeout?: number;
}
export declare namespace ChangeMessageVisibilityBatchRequestEntry {
    
    const filterSensitiveLog: (obj: ChangeMessageVisibilityBatchRequestEntry) => any;
}

export interface ChangeMessageVisibilityBatchRequest {
    
    QueueUrl: string | undefined;
    
    Entries: ChangeMessageVisibilityBatchRequestEntry[] | undefined;
}
export declare namespace ChangeMessageVisibilityBatchRequest {
    
    const filterSensitiveLog: (obj: ChangeMessageVisibilityBatchRequest) => any;
}

export interface BatchResultErrorEntry {
    
    Id: string | undefined;
    
    SenderFault: boolean | undefined;
    
    Code: string | undefined;
    
    Message?: string;
}
export declare namespace BatchResultErrorEntry {
    
    const filterSensitiveLog: (obj: BatchResultErrorEntry) => any;
}

export interface ChangeMessageVisibilityBatchResultEntry {
    
    Id: string | undefined;
}
export declare namespace ChangeMessageVisibilityBatchResultEntry {
    
    const filterSensitiveLog: (obj: ChangeMessageVisibilityBatchResultEntry) => any;
}

export interface ChangeMessageVisibilityBatchResult {
    
    Successful: ChangeMessageVisibilityBatchResultEntry[] | undefined;
    
    Failed: BatchResultErrorEntry[] | undefined;
}
export declare namespace ChangeMessageVisibilityBatchResult {
    
    const filterSensitiveLog: (obj: ChangeMessageVisibilityBatchResult) => any;
}

export declare class EmptyBatchRequest extends __BaseException {
    readonly name: "EmptyBatchRequest";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<EmptyBatchRequest, __BaseException>);
}

export declare class InvalidBatchEntryId extends __BaseException {
    readonly name: "InvalidBatchEntryId";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidBatchEntryId, __BaseException>);
}

export declare class TooManyEntriesInBatchRequest extends __BaseException {
    readonly name: "TooManyEntriesInBatchRequest";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyEntriesInBatchRequest, __BaseException>);
}
export declare type QueueAttributeName = "All" | "ApproximateNumberOfMessages" | "ApproximateNumberOfMessagesDelayed" | "ApproximateNumberOfMessagesNotVisible" | "ContentBasedDeduplication" | "CreatedTimestamp" | "DeduplicationScope" | "DelaySeconds" | "FifoQueue" | "FifoThroughputLimit" | "KmsDataKeyReusePeriodSeconds" | "KmsMasterKeyId" | "LastModifiedTimestamp" | "MaximumMessageSize" | "MessageRetentionPeriod" | "Policy" | "QueueArn" | "ReceiveMessageWaitTimeSeconds" | "RedriveAllowPolicy" | "RedrivePolicy" | "SqsManagedSseEnabled" | "VisibilityTimeout";

export interface CreateQueueRequest {
    
    QueueName: string | undefined;
    
    tags?: {
        [key: string]: string;
    };
    
    Attributes?: {
        [key: string]: string;
    };
}
export declare namespace CreateQueueRequest {
    
    const filterSensitiveLog: (obj: CreateQueueRequest) => any;
}

export interface CreateQueueResult {
    
    QueueUrl?: string;
}
export declare namespace CreateQueueResult {
    
    const filterSensitiveLog: (obj: CreateQueueResult) => any;
}

export declare class QueueDeletedRecently extends __BaseException {
    readonly name: "QueueDeletedRecently";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<QueueDeletedRecently, __BaseException>);
}

export declare class QueueNameExists extends __BaseException {
    readonly name: "QueueNameExists";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<QueueNameExists, __BaseException>);
}

export interface DeleteMessageRequest {
    
    QueueUrl: string | undefined;
    
    ReceiptHandle: string | undefined;
}
export declare namespace DeleteMessageRequest {
    
    const filterSensitiveLog: (obj: DeleteMessageRequest) => any;
}

export declare class InvalidIdFormat extends __BaseException {
    readonly name: "InvalidIdFormat";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidIdFormat, __BaseException>);
}

export interface DeleteMessageBatchRequestEntry {
    
    Id: string | undefined;
    
    ReceiptHandle: string | undefined;
}
export declare namespace DeleteMessageBatchRequestEntry {
    
    const filterSensitiveLog: (obj: DeleteMessageBatchRequestEntry) => any;
}

export interface DeleteMessageBatchRequest {
    
    QueueUrl: string | undefined;
    
    Entries: DeleteMessageBatchRequestEntry[] | undefined;
}
export declare namespace DeleteMessageBatchRequest {
    
    const filterSensitiveLog: (obj: DeleteMessageBatchRequest) => any;
}

export interface DeleteMessageBatchResultEntry {
    
    Id: string | undefined;
}
export declare namespace DeleteMessageBatchResultEntry {
    
    const filterSensitiveLog: (obj: DeleteMessageBatchResultEntry) => any;
}

export interface DeleteMessageBatchResult {
    
    Successful: DeleteMessageBatchResultEntry[] | undefined;
    
    Failed: BatchResultErrorEntry[] | undefined;
}
export declare namespace DeleteMessageBatchResult {
    
    const filterSensitiveLog: (obj: DeleteMessageBatchResult) => any;
}

export interface DeleteQueueRequest {
    
    QueueUrl: string | undefined;
}
export declare namespace DeleteQueueRequest {
    
    const filterSensitiveLog: (obj: DeleteQueueRequest) => any;
}

export interface GetQueueAttributesRequest {
    
    QueueUrl: string | undefined;
    
    AttributeNames?: (QueueAttributeName | string)[];
}
export declare namespace GetQueueAttributesRequest {
    
    const filterSensitiveLog: (obj: GetQueueAttributesRequest) => any;
}

export interface GetQueueAttributesResult {
    
    Attributes?: {
        [key: string]: string;
    };
}
export declare namespace GetQueueAttributesResult {
    
    const filterSensitiveLog: (obj: GetQueueAttributesResult) => any;
}

export declare class InvalidAttributeName extends __BaseException {
    readonly name: "InvalidAttributeName";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidAttributeName, __BaseException>);
}

export interface GetQueueUrlRequest {
    
    QueueName: string | undefined;
    
    QueueOwnerAWSAccountId?: string;
}
export declare namespace GetQueueUrlRequest {
    
    const filterSensitiveLog: (obj: GetQueueUrlRequest) => any;
}

export interface GetQueueUrlResult {
    
    QueueUrl?: string;
}
export declare namespace GetQueueUrlResult {
    
    const filterSensitiveLog: (obj: GetQueueUrlResult) => any;
}

export declare class QueueDoesNotExist extends __BaseException {
    readonly name: "QueueDoesNotExist";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<QueueDoesNotExist, __BaseException>);
}

export interface ListDeadLetterSourceQueuesRequest {
    
    QueueUrl: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListDeadLetterSourceQueuesRequest {
    
    const filterSensitiveLog: (obj: ListDeadLetterSourceQueuesRequest) => any;
}

export interface ListDeadLetterSourceQueuesResult {
    
    queueUrls: string[] | undefined;
    
    NextToken?: string;
}
export declare namespace ListDeadLetterSourceQueuesResult {
    
    const filterSensitiveLog: (obj: ListDeadLetterSourceQueuesResult) => any;
}

export interface ListQueuesRequest {
    
    QueueNamePrefix?: string;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListQueuesRequest {
    
    const filterSensitiveLog: (obj: ListQueuesRequest) => any;
}

export interface ListQueuesResult {
    
    NextToken?: string;
    
    QueueUrls?: string[];
}
export declare namespace ListQueuesResult {
    
    const filterSensitiveLog: (obj: ListQueuesResult) => any;
}
export interface ListQueueTagsRequest {
    
    QueueUrl: string | undefined;
}
export declare namespace ListQueueTagsRequest {
    
    const filterSensitiveLog: (obj: ListQueueTagsRequest) => any;
}
export interface ListQueueTagsResult {
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace ListQueueTagsResult {
    
    const filterSensitiveLog: (obj: ListQueueTagsResult) => any;
}

export declare class PurgeQueueInProgress extends __BaseException {
    readonly name: "PurgeQueueInProgress";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<PurgeQueueInProgress, __BaseException>);
}

export interface PurgeQueueRequest {
    
    QueueUrl: string | undefined;
}
export declare namespace PurgeQueueRequest {
    
    const filterSensitiveLog: (obj: PurgeQueueRequest) => any;
}

export interface ReceiveMessageRequest {
    
    QueueUrl: string | undefined;
    
    AttributeNames?: (QueueAttributeName | string)[];
    
    MessageAttributeNames?: string[];
    
    MaxNumberOfMessages?: number;
    
    VisibilityTimeout?: number;
    
    WaitTimeSeconds?: number;
    
    ReceiveRequestAttemptId?: string;
}
export declare namespace ReceiveMessageRequest {
    
    const filterSensitiveLog: (obj: ReceiveMessageRequest) => any;
}
export declare type MessageSystemAttributeName = "AWSTraceHeader" | "ApproximateFirstReceiveTimestamp" | "ApproximateReceiveCount" | "MessageDeduplicationId" | "MessageGroupId" | "SenderId" | "SentTimestamp" | "SequenceNumber";

export interface MessageAttributeValue {
    
    StringValue?: string;
    
    BinaryValue?: Uint8Array;
    
    StringListValues?: string[];
    
    BinaryListValues?: Uint8Array[];
    
    DataType: string | undefined;
}
export declare namespace MessageAttributeValue {
    
    const filterSensitiveLog: (obj: MessageAttributeValue) => any;
}

export interface Message {
    
    MessageId?: string;
    
    ReceiptHandle?: string;
    
    MD5OfBody?: string;
    
    Body?: string;
    
    Attributes?: {
        [key: string]: string;
    };
    
    MD5OfMessageAttributes?: string;
    
    MessageAttributes?: {
        [key: string]: MessageAttributeValue;
    };
}
export declare namespace Message {
    
    const filterSensitiveLog: (obj: Message) => any;
}

export interface ReceiveMessageResult {
    
    Messages?: Message[];
}
export declare namespace ReceiveMessageResult {
    
    const filterSensitiveLog: (obj: ReceiveMessageResult) => any;
}

export interface RemovePermissionRequest {
    
    QueueUrl: string | undefined;
    
    Label: string | undefined;
}
export declare namespace RemovePermissionRequest {
    
    const filterSensitiveLog: (obj: RemovePermissionRequest) => any;
}

export declare class InvalidMessageContents extends __BaseException {
    readonly name: "InvalidMessageContents";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidMessageContents, __BaseException>);
}
export declare type MessageSystemAttributeNameForSends = "AWSTraceHeader";

export interface MessageSystemAttributeValue {
    
    StringValue?: string;
    
    BinaryValue?: Uint8Array;
    
    StringListValues?: string[];
    
    BinaryListValues?: Uint8Array[];
    
    DataType: string | undefined;
}
export declare namespace MessageSystemAttributeValue {
    
    const filterSensitiveLog: (obj: MessageSystemAttributeValue) => any;
}

export interface SendMessageRequest {
    
    QueueUrl: string | undefined;
    
    MessageBody: string | undefined;
    
    DelaySeconds?: number;
    
    MessageAttributes?: {
        [key: string]: MessageAttributeValue;
    };
    
    MessageSystemAttributes?: {
        [key: string]: MessageSystemAttributeValue;
    };
    
    MessageDeduplicationId?: string;
    
    MessageGroupId?: string;
}
export declare namespace SendMessageRequest {
    
    const filterSensitiveLog: (obj: SendMessageRequest) => any;
}

export interface SendMessageResult {
    
    MD5OfMessageBody?: string;
    
    MD5OfMessageAttributes?: string;
    
    MD5OfMessageSystemAttributes?: string;
    
    MessageId?: string;
    
    SequenceNumber?: string;
}
export declare namespace SendMessageResult {
    
    const filterSensitiveLog: (obj: SendMessageResult) => any;
}

export declare class UnsupportedOperation extends __BaseException {
    readonly name: "UnsupportedOperation";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnsupportedOperation, __BaseException>);
}

export declare class BatchRequestTooLong extends __BaseException {
    readonly name: "BatchRequestTooLong";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<BatchRequestTooLong, __BaseException>);
}

export interface SendMessageBatchRequestEntry {
    
    Id: string | undefined;
    
    MessageBody: string | undefined;
    
    DelaySeconds?: number;
    
    MessageAttributes?: {
        [key: string]: MessageAttributeValue;
    };
    
    MessageSystemAttributes?: {
        [key: string]: MessageSystemAttributeValue;
    };
    
    MessageDeduplicationId?: string;
    
    MessageGroupId?: string;
}
export declare namespace SendMessageBatchRequestEntry {
    
    const filterSensitiveLog: (obj: SendMessageBatchRequestEntry) => any;
}

export interface SendMessageBatchRequest {
    
    QueueUrl: string | undefined;
    
    Entries: SendMessageBatchRequestEntry[] | undefined;
}
export declare namespace SendMessageBatchRequest {
    
    const filterSensitiveLog: (obj: SendMessageBatchRequest) => any;
}

export interface SendMessageBatchResultEntry {
    
    Id: string | undefined;
    
    MessageId: string | undefined;
    
    MD5OfMessageBody: string | undefined;
    
    MD5OfMessageAttributes?: string;
    
    MD5OfMessageSystemAttributes?: string;
    
    SequenceNumber?: string;
}
export declare namespace SendMessageBatchResultEntry {
    
    const filterSensitiveLog: (obj: SendMessageBatchResultEntry) => any;
}

export interface SendMessageBatchResult {
    
    Successful: SendMessageBatchResultEntry[] | undefined;
    
    Failed: BatchResultErrorEntry[] | undefined;
}
export declare namespace SendMessageBatchResult {
    
    const filterSensitiveLog: (obj: SendMessageBatchResult) => any;
}

export interface SetQueueAttributesRequest {
    
    QueueUrl: string | undefined;
    
    Attributes: {
        [key: string]: string;
    } | undefined;
}
export declare namespace SetQueueAttributesRequest {
    
    const filterSensitiveLog: (obj: SetQueueAttributesRequest) => any;
}
export interface TagQueueRequest {
    
    QueueUrl: string | undefined;
    
    Tags: {
        [key: string]: string;
    } | undefined;
}
export declare namespace TagQueueRequest {
    
    const filterSensitiveLog: (obj: TagQueueRequest) => any;
}
export interface UntagQueueRequest {
    
    QueueUrl: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagQueueRequest {
    
    const filterSensitiveLog: (obj: UntagQueueRequest) => any;
}
